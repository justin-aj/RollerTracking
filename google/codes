/*
        function initMap(data) {
            let map, infoWindow;
            const polyOptions = [];
            for(var y = 0; y < 4; y++){
                polyOptions.push({lat:parseFloat(data[y].latitude), lng: parseFloat(data[y].longitude)})
            }
            console.log(polyOptions);
            //infoWindow = new google.maps.InfoWindow();
            var heatmapdata = [];
            var sanFrancisco = new google.maps.LatLng(13.050241, 77.619364);
            var dict = new Object();
            var dict =
                {
                    1: "#FF0000",
                    2: "#11EB11",
                    3: "#FAC286",

                }
            map = new google.maps.Map(document.getElementById('map'), {
                center: sanFrancisco,
                zoom: 25

            });

            function rect(polyOptions) {
                const point = new google.maps.LatLng(13.050254, 77.619345);
                for(var a = 0; a < 1; a++){
                    var p1 = polyOptions[a].latitude + polyOptions[a].latitude
                }

                const draw = new google.maps.Polygon(
                    {
                        paths: polyOptions, strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: '#FF0000',
                        fillOpacity: 0.35,
                        map: map
                    });
                draw.setMap(map);
                const isit = google.maps.geometry.poly.containsLocation(point, draw);
            }

            var g = rect(polyOptions);
/*
            function updateMap(i) {
                var loc = new google.maps.LatLng(data[i].latitude, data[i].longitude);
                bound = [{lat:13.050146,lng: 77.619328},
                        {lat: 13.050145, lng: 77.619360},
                        {lat: 13.050159, lng: 77.619362},
                        {lat: 13.050161, lng: 77.619329},

                    ]
                const boundmap = new google.maps.Polygon({paths: bound,strokeColor: '#FF0000',
                                        strokeOpacity: 0.8,
                                    strokeWeight: 2,
                                    fillColor: '#FF0000',
                                    fillOpacity: 0,
                                        map: map});
                boundmap.setMap(map);

                if(google.maps.geometry.poly.containsLocation(loc, boundmap)){
                    console.log("Inside the BOX, Updated CMV Values");
                    data[i].cmv = 10;
                }
                console.log(data[i].cmv);
                heatmapdata.push({
                        weight: parseFloat(data[i].cmv),
                        location: loc
                    });
                    const heatmap = new google.maps.visualization.HeatmapLayer({
                        center: sanFrancisco,
                        data: heatmapdata,
                        map: map,
                    });
                    heatmap.setMap(map);


                }

            var interval = 1000;
            for(var i=0; i<=data.length;i++)
            {
                console.log(i);
                var tmp = setTimeout(updateMap, interval, i)
                interval = interval + 1000;
            }
            console.log("Updated");
            function updated(){
            for(i=0;i<data.length;i++){
                console.log(i + "CMV" + data[i].cmv);
            }}
            setTimeout(updated,20000);

              /*
        const markers = data?.map((i) => {
            const marker = new google.maps.Marker({
                position: { lat: parseFloat(i.latitude), lng: parseFloat(i.longitude)},
                map: map,
            })
        });



            //myInterval = setInterval(initMap, 10000);


            //console.log(isit);

            const svgMarker = {
                path: "M-1.547 12l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM0 0q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
                fillColor: "blue",
                fillOpacity: 0.6,
                strokeWeight: 0,
                rotation: 0,
                scale: 2,
                anchor: new google.maps.Point(0, 20),
            };

            var WatchID = navigator.geolocation.watchPosition(
                            (position) => {
                            const pos = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude,
                            };


            const marker = new google.maps.Marker({
                position: {lat: position.coords.latitude, lng: position.coords.longitude},
                icon: svgMarker,
                map: map,
            })


            //infoWindow.setPosition(pos);

            //console.log(WatchID);
            //infoWindow.open(map);
            //map.setCenter(point);
            //map.setZoom(29);
            infoWindow = new google.maps.InfoWindow({
                            content: "Click the map to get Lat/Lng!",
                            position: sanFrancisco,
                            map:map,
                                        });
            infoWindow.open(map);
            map.addListener("click", (mapsMouseEvent) => {
                // Close the current InfoWindow.
                // Create a new InfoWindow.
                infoWindow.close(map);
                infoWindow = new google.maps.InfoWindow({
                    position: mapsMouseEvent.latLng,
                });
                infoWindow.setContent(
                    JSON.stringify(mapsMouseEvent.latLng.toJSON(), null, 2)
                );
                infoWindow.open(map);
            });
            return data;
            //data[4].cmv = 10;
        }
        */



//google.maps.event.addDomListener(window, "load", initMap);

//dat = 10;
/*
var csrf = $(this).attr('csrf');
$(document).ready(function(){
    $.ajax({
            url: "{% url 'get'%}",
            data: {
                'data':dat,
                'csrfmiddlewaretoken': csrf
                },
            type: 'post',
            success: function (data) {
                console.log("THis is it"+data);
            }
      });
    });
*/